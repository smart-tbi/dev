"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[202],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),u=a,m=d["".concat(l,".").concat(u)]||d[u]||g[u]||r;return n?i.createElement(m,o(o({ref:t},p),{},{components:n})):i.createElement(m,o({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1254:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return g}});var i=n(7462),a=n(3366),r=(n(7294),n(3905)),o=["components"],s={sidebar_position:2},l="Client-side Logging",c={unversionedId:"logging/client-side-logging",id:"logging/client-side-logging",title:"Client-side Logging",description:"The LogDispatcher class is used by all extensions to log all activities within the extension and within Facebook. The format of each log entry is highly customizable, but usually contains the following fields:",source:"@site/docs/logging/client-side-logging.md",sourceDirName:"logging",slug:"/logging/client-side-logging",permalink:"/dev/docs/logging/client-side-logging",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/logging/client-side-logging.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/dev/docs/logging/overview"},next:{title:"AWS Logging Backend",permalink:"/dev/docs/logging/aws-logging-backend"}},p={},g=[{value:"Examples",id:"examples",level:2},{value:"Usage",id:"usage",level:3},{value:"Example Data",id:"example-data",level:3}],d={toc:g};function u(e){var t=e.components,n=(0,a.Z)(e,o);return(0,r.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"client-side-logging"},"Client-side Logging"),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"LogDispatcher")," class is used by all extensions to ",(0,r.kt)("strong",{parentName:"p"},"log all activities within the extension and within Facebook"),". The format of each log entry is highly customizable, but usually contains the following fields:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"log_id"),":  Uses UUID v4 which is (almost) guaranteed to be random."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"user_id"),":  Uses browser fingerprinting through ",(0,r.kt)("a",{parentName:"li",href:"https://fingerprintjs.com/"},"FingerprintJS")," to ensure identical user IDs are generated if the browser used is the same one that was originally used."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"session_id"),": Uses UUID v1 which is guaranteed to be sequential, so that logs can be sorted by session_id."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"timestamp"),": ISO 8610 String"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"event_type"),": General type of the event (e.g. USER_POST_VIEW, USER_ENABLE_EXTENSION)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"event_detail"),": Details of the event (e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"User spent 4 seconds in the post, and viewed it 4 times")," )"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"post_{field}"),": Details of the post, if any.")),(0,r.kt)("p",null,"Afterwards, each log is sent to the API server hosted on ",(0,r.kt)("strong",{parentName:"p"},"AWS Lambda"),", which is managed by ",(0,r.kt)("strong",{parentName:"p"},"API Gateway"),", and its database is ",(0,r.kt)("strong",{parentName:"p"},"DynamoDB"),"."),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("h3",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},' // LogDispatcher class is responsible for sending logs to the server.\n\n // initialize LogDispatcher\n const logDispatcher = new LogDispatcher("LOGGING_API_URL");\n\n // send log to server with event_type and event_detail.\n // log_id, user_id, session_id, and timestamp will be automatically generated.\n logDispatcher.logGeneralEvent("BUTTON_CLICK", "clicked like button");\n\n // send log to server with a custom object\n // log_id, user_id, session_id, and timestamp will be automatically generated.\n logDispatcher.logCustomEvent(\n  {"custom_field": "CUSTOM_FIELD", "remarks": "blah blah blah"}\n );\n\n')),(0,r.kt)("h3",{id:"example-data"},"Example Data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "log_id": "f336d711-e0cb-4dce-89f7-1dbaf38ce446",\n    "user_id": "97796349498c4a6188e097d63d825069",\n    "session_id": "725243c0-befd-11ec-8000-b36efc459361",\n    "timestamp": "2022-04-18T09:54:47.916Z",\n    "event_type": "FB_REACT_TO_POST",\n    "event_detail": "Like",\n    "post_type": "GROUP",\n    "post_author": "Jane Doe",\n    "post_datetime": "2022-04-17T12:54:45.801Z",\n    "post_groupName": "Happy Life \ud83c\udf3f",\n    "post_textLength": 30,\n    "post_containsVideo": false,\n    "post_containsImage": true,\n    "post_containsLink": false,\n    "post_sentiment_neg": 0,\n    "post_sentiment_neu": 1,\n    "post_sentiment_pos": 0,\n    "post_sentiment_compound": 0\n}\n')))}u.isMDXComponent=!0}}]);