"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[128],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),d=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=d(e.components);return o.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(n),f=r,m=u["".concat(l,".").concat(f)]||u[f]||p[f]||i;return n?o.createElement(m,a(a({ref:t},c),{},{components:n})):o.createElement(m,a({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var d=2;d<i;d++)a[d]=n[d];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},315:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return p}});var o=n(7462),r=n(3366),i=(n(7294),n(3905)),a=["components"],s={sidebar_position:3},l="Displaying Posts in the Dialog",d={unversionedId:"focusmode/displaying-posts-in-the-dialog",id:"focusmode/displaying-posts-in-the-dialog",title:"Displaying Posts in the Dialog",description:"This page explains the UI layout of the Focus Mode extension's dedicated overlay dialog. PostsBox is used as a container for the extension's UIs, and the media area, text, and buttons for liking and going to posts are rendered by the Post component.",source:"@site/docs/focusmode/displaying-posts-in-the-dialog.md",sourceDirName:"focusmode",slug:"/focusmode/displaying-posts-in-the-dialog",permalink:"/dev/docs/focusmode/displaying-posts-in-the-dialog",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/focusmode/displaying-posts-in-the-dialog.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Parsing Posts from the Feed",permalink:"/dev/docs/focusmode/parsing-posts-from-the-feed"},next:{title:"Filter",permalink:"/dev/docs/category/filter"}},c={},p=[{value:"Breakdown of the Focus Mode UI",id:"breakdown-of-the-focus-mode-ui",level:2}],u={toc:p};function f(e){var t=e.components,s=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"displaying-posts-in-the-dialog"},"Displaying Posts in the Dialog"),(0,i.kt)("p",null,"This page explains the UI layout of the Focus Mode extension's dedicated overlay dialog. ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"PostsBox"))," is used as a container for the extension's UIs, and the media area, text, and buttons for liking and going to posts are rendered by the ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"Post"))," component."),(0,i.kt)("h2",{id:"breakdown-of-the-focus-mode-ui"},"Breakdown of the Focus Mode UI"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Breakdown of the Focus Mode Overlay Dialog",src:n(6634).Z,width:"1098",height:"481"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"PostsBox"))," renders everything shown in the above screenshot."),(0,i.kt)("li",{parentName:"ul"},"Everything inside the purple containers, including the dialog, is rendered by ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"PostsBox")),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Post"))," renders everything inside the pink rectangle."),(0,i.kt)("li",{parentName:"ul"},"There is a logic that renders the media area (photos and videos) automatically to fit the media properly in the given area. Based on the user's screen size, it calculates the scale rate and uses the ",(0,i.kt)("inlineCode",{parentName:"li"},"transform")," CSS property to change the scale of the media object (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"transform: scale({SCALE_RATE})"),")")))}f.isMDXComponent=!0},6634:function(e,t,n){t.Z=n.p+"assets/images/focusmode_dialog-93a232f1213f2517f2411ea4606aafe9.png"}}]);