"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[616],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=l(n),m=o,f=u["".concat(p,".").concat(m)]||u[m]||d[m]||s;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var l=2;l<s;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2960:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return d}});var r=n(7462),o=n(3366),s=(n(7294),n(3905)),a=["components"],i={sidebar_position:2},p="Parsing Posts from the Feed",l={unversionedId:"focusmode/parsing-posts-from-the-feed",id:"focusmode/parsing-posts-from-the-feed",title:"Parsing Posts from the Feed",description:"The PostsBox component obtains posts from the feed by first filtering real posts from the user's feed. It parses each post's fields (author, posted date, post text, etc.) using the PostParser in utils/PostParser.js. Then, the parsed posts is stored as a list in the structuredPosts state in the PostsBox component, which will be used to keep track of posts by the extension.",source:"@site/docs/focusmode/parsing-posts-from-the-feed.md",sourceDirName:"focusmode",slug:"/focusmode/parsing-posts-from-the-feed",permalink:"/dev/docs/focusmode/parsing-posts-from-the-feed",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/focusmode/parsing-posts-from-the-feed.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/dev/docs/focusmode/overview"},next:{title:"Displaying Posts in the Dialog",permalink:"/dev/docs/focusmode/displaying-posts-in-the-dialog"}},c={},d=[{value:"Detailed Sequence",id:"detailed-sequence",level:2}],u={toc:d};function m(e){var t=e.components,i=(0,o.Z)(e,a);return(0,s.kt)("wrapper",(0,r.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"parsing-posts-from-the-feed"},"Parsing Posts from the Feed"),(0,s.kt)("p",null,"The ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"PostsBox"))," component obtains posts from the feed by first filtering real posts from the user's feed. It parses each post's fields (author, posted date, post text, etc.) using the ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"PostParser"))," in ",(0,s.kt)("inlineCode",{parentName:"p"},"utils/PostParser.js"),". Then, the parsed posts is stored as a list in the ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"structuredPosts"))," state in the ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"PostsBox"))," component, which will be used to keep track of posts by the extension."),(0,s.kt)("h2",{id:"detailed-sequence"},"Detailed Sequence"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Using querySelector to match posts in the feed",src:n(1519).Z,width:"969",height:"963"})),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"findPosts()")," in ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"PostsBox"))," gets a list of all posts in the Facebook feed by filtering elements in ",(0,s.kt)("inlineCode",{parentName:"p"},"document")," with a selector ",(0,s.kt)("inlineCode",{parentName:"p"},'[role="article"]'),". However, this selector cannot guarantee that every post returned will be a real post, so it goes through certain rule-defined processes to eliminate false positives, such as ",(0,s.kt)("em",{parentName:"p"},"Find Friends")," and ",(0,s.kt)("em",{parentName:"p"},"Reels and Short Videos"),".")),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Each post will be then parsed by ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"PostParser"))," which will return a JS object containing post details.")),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"The list of ",(0,s.kt)("inlineCode",{parentName:"p"},"HTMLElement"),"s of posts (selected by ",(0,s.kt)("inlineCode",{parentName:"p"},"[role='article']"),") will be stored in ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"posts"))," state. The posts parsed in the previous step are stored as a list of objects in ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"structuredPosts")),". In order to allow the extension to interact with the posts, we keep their DOMs in ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"posts"))," so that users can ",(0,s.kt)("em",{parentName:"p"},"like")," or see the post in the Facebook feed (not in the dialog).")),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"The focus mode will depend on the ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"structuredPosts"))," state to render each post in the dialog."))))}m.isMDXComponent=!0},1519:function(e,t,n){t.Z=n.p+"assets/images/focusmode_querySelector-3fb62941c50b4ef4d7fc1643217bd17a.png"}}]);